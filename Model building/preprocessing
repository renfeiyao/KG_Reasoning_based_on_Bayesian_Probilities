{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75341aa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#utils\n",
    "#导入工具包，定义全局变量\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from pgmpy.models import BayesianNetwork\n",
    "from pgmpy.estimators import MaximumLikelihoodEstimator, BayesianEstimator\n",
    "import time\n",
    "from pgmpy.estimators import K2Score\n",
    "from pgmpy.estimators import ExhaustiveSearch\n",
    "import matplotlib.pyplot as plt\n",
    "PATH='C:\\\\Users\\\\paper\\\\knowledge_center\\\\'\n",
    "'''\n",
    "file_name=['decision','engineering','engineering_entityrelation','engineering_historysystem','entity',\n",
    "           'entity_property','entity_relation','entity_standard','entity_type','evaluation','forecast',\n",
    "          'history','literature','property_standard','property_type','relation_type']\n",
    "'''\n",
    "\n",
    "def build_D():\n",
    "    '''\n",
    "    从entity, entity_type表中构造案例数据集D，从relation_type中提取网络结构\n",
    "    '''\n",
    "    #decision=pd.DataFrame(pd.read_csv(PATH+'decision'+'.csv'))\n",
    "    #engineering=pd.DataFrame(pd.read_csv(PATH+'engineering'+'.csv'))\n",
    "    #engineering_entityrelation=pd.DataFrame(pd.read_csv(PATH+'engineering_entityrelation'+'.csv'))\n",
    "    #engineering_historysystem=pd.DataFrame(pd.read_csv(PATH+'engineering_historysystem'+'.csv'))\n",
    "    entity=pd.DataFrame(pd.read_csv(PATH+'entity'+'.csv'))\n",
    "    #entity_property=pd.DataFrame(pd.read_csv(PATH+'entity_property'+'.csv'))\n",
    "    entity_relation=pd.DataFrame(pd.read_csv(PATH+'entity_relation'+'.csv'))\n",
    "    entity_standard=pd.DataFrame(pd.read_csv(PATH+'entity_standard'+'.csv'))\n",
    "    entity_type=pd.DataFrame(pd.read_csv(PATH+'entity_type'+'.csv'))\n",
    "    #evaluation=pd.DataFrame(pd.read_csv(PATH+'evaluation'+'.csv'))\n",
    "    #forecast=pd.DataFrame(pd.read_csv(PATH+'forecast'+'.csv'))\n",
    "    #history=pd.DataFrame(pd.read_csv(PATH+'history'+'.csv'))\n",
    "    #literature=pd.DataFrame(pd.read_csv(PATH+'literature'+'.csv'))\n",
    "    #property_standard=pd.DataFrame(pd.read_csv(PATH+'entity_standard'+'.csv'))\n",
    "    #property_type=pd.DataFrame(pd.read_csv(PATH+'entity_type'+'.csv'))\n",
    "    relation_type=pd.DataFrame(pd.read_csv(PATH+'relation_type'+'.csv'))\n",
    "    \n",
    "    #为各实体匹配类别\n",
    "    entity_to_type=pd.merge(entity,entity_standard,how='left',on='Entity_StandardID')\n",
    "    entity_to_type.save(PATH+'entity_to_type.csv')\n",
    "    \n",
    "    #提取网络结构\n",
    "    BNnodes=[]\n",
    "    for i in range(len(relation_type)):\n",
    "        head_type=relation_type.loc[i,'Head_EntityID']\n",
    "        tail_type=relation_type.loc[i,'Tail_EntityID']\n",
    "        head_type_name=entity_type[entity_type['Entity_TypeID']==head_type].iloc[0,1]\n",
    "        tail_type_name=entity_type[entity_type['Entity_TypeID']==tail_type].iloc[0,1]\n",
    "        if head_type=='En0015' and tail_type!='En0001':\n",
    "            if tail_type!='En0014'and tail_type!='En0002':\n",
    "                nodeset=(tail_type_name,head_type_name)\n",
    "            else:\n",
    "                nodeset=(head_type_name,tail_type_name)\n",
    "        BNnodes.append(nodeset)\n",
    "    \n",
    "    #提取数据集\n",
    "    #构造空Dataframe,列名为实体类别\n",
    "    D = pd.DataFrame(columns=entity_type.Entity_TypeName[1:].tolist())\n",
    "    #抽取符合类别的实体\n",
    "    for i in range(len(entity_relation)):\n",
    "    head_entity=entity_relation.loc[i,'Head_EntityID']\n",
    "    tail_entity=entity_relation.loc[i,'Tail_EntityID']\n",
    "    head_entity_type=entity_to_type[entity_to_type['Entity_ID']==head_entity].iloc[0,4]\n",
    "    tail_entity_type=entity_to_type[entity_to_type['Entity_ID']==tail_entity].iloc[0,4]\n",
    "    tail_type_name=entity_type[entity_type['Entity_TypeID']==tail_entity_type].iloc[0,1]\n",
    "    #填入Dataframe\n",
    "    if head_entity_type=='En0015':\n",
    "        if head_entity not in D['Project'].values:\n",
    "            D.loc[len(D)+1,'Project']=head_entity\n",
    "        if tail_entity_type!='En0015'and tail_entity_type!='En0001':\n",
    "            if D.loc[D['Project']==head_entity,tail_type_name].isnull().any():\n",
    "                D.loc[D['Project']==head_entity,tail_type_name]=D.loc[D['Project']==head_entity,tail_type_name].fillna(value=tail_entity)\n",
    "            else:\n",
    "                index=len(D)+1\n",
    "                D.loc[index]=D[D['Project']==head_entity].iloc[0,:]\n",
    "                D.loc[index,tail_type_name]=tail_entity\n",
    "    #将Nan值替换为空节点NULL\n",
    "    D=D.fillna(value='NULL')\n",
    "    D.to_pickle(PATH+'D.pkl')\n",
    "    return BNnodes\n",
    "\n",
    "def show_D_distribution(D):\n",
    "    '''\n",
    "    观察现象和措施的分布\n",
    "    '''\n",
    "    plt.rcParams['figure.figsize']=(10.0,5.0)\n",
    "    plt.rcParams['font.sans-serif']=['KaiTi']\n",
    "    plt.title('现象节点变量分布')\n",
    "    plt.hist(D['Phenomenon'],bins=state_names['Phenomenon'])\n",
    "    plt.savefig(PATH+'Phenomenon_hist.png',dpi=300,bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    plt.rcParams['figure.figsize']=(30.0,15.0)\n",
    "    plt.title('措施节点变量分布')\n",
    "    plt.hist(D['Target'],bins=state_names['Target'])\n",
    "    plt.savefig(PATH+'Target_hist.png',dpi=300,bbox_inches='tight')\n",
    "    plt.show()\n",
    "\n",
    "#分批训练，一起训练容易卡死\n",
    "def train_BN(model,D_train,batch_size):\n",
    "    lines=len(D_train)-batch_size\n",
    "    batch=int(lines//batch_size)\n",
    "    for i in range(batch):\n",
    "        model.fit_update(D_train[(i+1)*batch_size+1:(i+2)*batch_size])\n",
    "        model.save(PATH+'BN_test'+str(i+2)+'.bif',filetype='bif')\n",
    "        print(\"batch\",i+1)\n",
    "    model.fit_update(D_train[batch*batch_size+1:])\n",
    "    print(\"batch\",batch+1)\n",
    "    return model\n",
    "\n",
    "def get_BN():\n",
    "    '''\n",
    "    利用数据集和网络结构构建并训练BN\n",
    "    '''\n",
    "    #获取结构\n",
    "    BNnodes=build_D()\n",
    "    #训练数据集\n",
    "    D=pd.read_pickle(PATH+'D.pkl')\n",
    "    D_train, D_test=train_test_split(D, test_size=0.33, random_state=42)\n",
    "    D_train.to_pickle(PATH+'D_train.pkl')\n",
    "    D_test.to_pickle(PATH+'D_test.pkl')\n",
    "    #状态变量集\n",
    "    state_names=dict()\n",
    "    for i in D.columns.tolist():\n",
    "        state_names[i]=D[i].unique().tolist()\n",
    "    #数据查看\n",
    "    for i in state_names.keys():\n",
    "        print(i,len(state_names[i]))\n",
    "    #构建\n",
    "    start=time.time()\n",
    "    model = BayesianNetwork(BNnodes)\n",
    "    batch_size=3\n",
    "    #训练\n",
    "    model.fit(D_train[0:batch_size], estimator=MaximumLikelihoodEstimator,state_names=state_names)\n",
    "    model=train_BN(model,D_train,batch_size)\n",
    "    end=time.time()\n",
    "    model.save(PATH+'BN_full.bif',filetype='bif')\n",
    "    print('time:',end-start)\n",
    "    return model\n",
    "    \n",
    "def predict_nodes():\n",
    "    '''\n",
    "    贝叶斯网络节点变量预测\n",
    "    '''\n",
    "    model= BayesianNetwork.load(PATH+'BN_full.bif', filetype='bif')\n",
    "    D_test=pd.read_pickle(PATH+'D_test.pkl')\n",
    "    start=time.time()\n",
    "    #df=pd.DataFrame(index=D_test.index)\n",
    "    for i in D.columns.values:\n",
    "        possibilities=model.predict_probability(D_test.drop([i],axis=1))\n",
    "        possibilities.to_csv(PATH+'predict_results\\\\'+i+'_possibilities.csv')\n",
    "        results=model.predict(D_test.drop([i],axis=1))\n",
    "        results.to_csv(PATH+'predict_results\\\\'+i+'_results.csv')\n",
    "        df.loc[:,i]=results\n",
    "        print(i)\n",
    "        #for t in df.index:\n",
    "            #df.loc[t,i+'_possibilities']=possibilities.loc[t,i+'_'+results.loc[t,i]]\n",
    "    end=time.time()\n",
    "    print('time:',end-start)\n",
    "    \n",
    "def predict_links(types,numlimit,threshold):\n",
    "    '''\n",
    "    预测三元组\n",
    "    '''\n",
    "    df=pd.DataFrame(columns=['HeadEntity','TailEntity','Link_test','Link_pred'])\n",
    "    entity_relation=pd.DataFrame(pd.read_csv(PATH+'entity_relation'+'.csv'))\n",
    "    for i in types:\n",
    "        possibilities=pd.DataFrame(pd.read_csv(PATH+'predict_results\\\\'+i+'_possibilities.csv'))\n",
    "        if numlimit[i]==1:\n",
    "            results=pd.DataFrame(pd.read_csv(PATH+'predict_results\\\\'+i+'_results.csv'))\n",
    "            for t in possibilities.index:\n",
    "                if possibilities.loc[t,i+'_'+results.loc[t,i]]>threshold[i]:\n",
    "                    df.loc[t,i+'_possibilities']=results.loc[t,i+'_'+results.loc[t,i]]\n",
    "        else:\n",
    "            for t in possibilities.index:\n",
    "                if possibilities.loc[t,i+'_'+results.loc[t,i]]>threshold:\n",
    "                    for n in numlimit[i]:\n",
    "                        df.loc[t,i+'_possibilities']=possibilities.loc[t,i+'_'+results.loc[t,i]].tolist()\n",
    "                        \n",
    "def showBN(model,save=True):\n",
    "    '''传入BayesianModel对象，调用graphviz绘制结构图，jupyter中可直接显示'''\n",
    "    from graphviz import Digraph\n",
    "    node_attr = dict(\n",
    "     style='filled',\n",
    "     shape='box',\n",
    "     align='left',\n",
    "     fontsize='12',\n",
    "     ranksep='0.1',\n",
    "     height='0.2'\n",
    "    )\n",
    "    dot = Digraph(node_attr=node_attr, graph_attr=dict(size=\"12,12\"))\n",
    "    seen = set()\n",
    "    edges=model.edges()\n",
    "    for a,b in edges:\n",
    "        dot.edge(a,b)\n",
    "    if save:\n",
    "        #dot.view(cleanup=True)\n",
    "        dot.render(directory=PATH+'doctest-output', view=True)  \n",
    "    return dot\n",
    " \n",
    "#没用\n",
    "def structure_learning(model,D):\n",
    "    '''\n",
    "    贝叶斯网络结构学习\n",
    "    '''\n",
    "    es = ExhaustiveSearch(D, scoring_method=K2Score(D))\n",
    "    best_model = es.estimate()\n",
    "    print(best_model.edges())\n",
    "\n",
    "    print(\"\\nAll DAGs by score:\")\n",
    "    for score, dag in reversed(es.all_scores()):\n",
    "        print(score, dag.edges())\n",
    "    best_model.save(PATH+'best_model.bif',filetype='bif') \n",
    "\n",
    "def print_cpds(model):\n",
    "    '''\n",
    "    打印cpd表\n",
    "    '''\n",
    "    for cpd in model.get_cpds():\n",
    "        print(\"CPD of {variable}:\".format(variable=cpd.variable))\n",
    "        print(cpd)\n",
    "\n",
    "model=get_BN()\n",
    "print_cpds(model)\n",
    "D=pd.read_pickle(PATH+'D.pkl')\n",
    "show_D_distribution(D)\n",
    "types=pd.read_csv(PATH+'relation_types.csv')\n",
    "numlimit=types.numlimit\n",
    "threshold=types.threshold\n",
    "predict_links(types,numlimit,threshold)\n",
    "dot=showBN(model)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "649225a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "PATH='C:\\\\Users\\\\paper\\\\knowledge_center\\\\'\n",
    "file_name=['decision','engineering','engineering_entityrelation','engineering_historysystem','entity',\n",
    "           'entity_property','entity_relation','entity_standard','entity_type','evaluation','forecast',\n",
    "          'history','literature','property_standard','property_type','relation_type']\n",
    "decision=pd.DataFrame(pd.read_csv(PATH+'decision'+'.csv'))\n",
    "engineering=pd.DataFrame(pd.read_csv(PATH+'engineering'+'.csv'))\n",
    "engineering_entityrelation=pd.DataFrame(pd.read_csv(PATH+'engineering_entityrelation'+'.csv'))\n",
    "engineering_historysystem=pd.DataFrame(pd.read_csv(PATH+'engineering_historysystem'+'.csv'))\n",
    "entity=pd.DataFrame(pd.read_csv(PATH+'entity'+'.csv'))\n",
    "entity_property=pd.DataFrame(pd.read_csv(PATH+'entity_property'+'.csv'))\n",
    "entity_relation=pd.DataFrame(pd.read_csv(PATH+'entity_relation'+'.csv'))\n",
    "entity_standard=pd.DataFrame(pd.read_csv(PATH+'entity_standard'+'.csv'))\n",
    "entity_type=pd.DataFrame(pd.read_csv(PATH+'entity_type'+'.csv'))\n",
    "evaluation=pd.DataFrame(pd.read_csv(PATH+'evaluation'+'.csv'))\n",
    "forecast=pd.DataFrame(pd.read_csv(PATH+'forecast'+'.csv'))\n",
    "history=pd.DataFrame(pd.read_csv(PATH+'history'+'.csv'))\n",
    "literature=pd.DataFrame(pd.read_csv(PATH+'literature'+'.csv'))\n",
    "property_standard=pd.DataFrame(pd.read_csv(PATH+'entity_standard'+'.csv'))\n",
    "property_type=pd.DataFrame(pd.read_csv(PATH+'entity_type'+'.csv'))\n",
    "relation_type=pd.DataFrame(pd.read_csv(PATH+'relation_type'+'.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "744265dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Entity_TypeID Entity_TypeName Entity_TypeNameChinese  TypeNumber\n",
      "0         En0001           Title                   文献名称           3\n",
      "1         En0002      Phenomenon                   施工现象           3\n",
      "2         En0003        Location                     城市           1\n",
      "3         En0004          Tunnel                     隧道           1\n",
      "4         En0005          Shield                     盾构           1\n",
      "5         En0006         Segment                     管片           1\n",
      "6         En0007         Geology                     地质           1\n",
      "7         En0008      Propelling                   推进系统           2\n",
      "8         En0009         Cutting                   切削系统           2\n",
      "9         En0010        Seriflux                   浆液系统           2\n",
      "10        En0011        Grouting                   注浆系统           2\n",
      "11        En0012   Stabilization                   土体改良           2\n",
      "12        En0013      Supporting                   辅助工法           2\n",
      "13        En0014          Target                     措施           3\n",
      "14        En0015         Project                     项目           3\n"
     ]
    }
   ],
   "source": [
    "entity_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7ec614cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "entity_to_type=pd.merge(entity,entity_standard,how='left',on='Entity_StandardID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40355356",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity_ID</th>\n",
       "      <th>Entity_Name</th>\n",
       "      <th>Entity_StandardID</th>\n",
       "      <th>Entity_StandardName</th>\n",
       "      <th>Entity_TypeID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>E0001</td>\n",
       "      <td>深圳某电缆隧道工程1</td>\n",
       "      <td>ES0303</td>\n",
       "      <td>工程</td>\n",
       "      <td>En0015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>E0002</td>\n",
       "      <td>广州地铁三号线某双线圆型盾构隧道区间1</td>\n",
       "      <td>ES0303</td>\n",
       "      <td>工程</td>\n",
       "      <td>En0015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>E0003</td>\n",
       "      <td>杭州沿江大道运河隧道工程</td>\n",
       "      <td>ES0303</td>\n",
       "      <td>工程</td>\n",
       "      <td>En0015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>E0004</td>\n",
       "      <td>南京地铁某标段区间1</td>\n",
       "      <td>ES0303</td>\n",
       "      <td>工程</td>\n",
       "      <td>En0015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E0005</td>\n",
       "      <td>杭州地铁1号线红普路站-九堡站区间隧道</td>\n",
       "      <td>ES0303</td>\n",
       "      <td>工程</td>\n",
       "      <td>En0015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>E0396</td>\n",
       "      <td>泡沫剂改良</td>\n",
       "      <td>ES0291</td>\n",
       "      <td>泡沫剂改良</td>\n",
       "      <td>En0013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>E0397</td>\n",
       "      <td>膨润土改良</td>\n",
       "      <td>ES0292</td>\n",
       "      <td>膨润土改良</td>\n",
       "      <td>En0013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>E0398</td>\n",
       "      <td>加水改良</td>\n",
       "      <td>ES0293</td>\n",
       "      <td>加水改良</td>\n",
       "      <td>En0013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>E0399</td>\n",
       "      <td>聚合物改良</td>\n",
       "      <td>ES0294</td>\n",
       "      <td>聚合物改良</td>\n",
       "      <td>En0013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>E0400</td>\n",
       "      <td>地质0026</td>\n",
       "      <td>ES0298</td>\n",
       "      <td>地质</td>\n",
       "      <td>En0007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Entity_ID          Entity_Name Entity_StandardID Entity_StandardName  \\\n",
       "0       E0001           深圳某电缆隧道工程1            ES0303                  工程   \n",
       "1       E0002  广州地铁三号线某双线圆型盾构隧道区间1            ES0303                  工程   \n",
       "2       E0003         杭州沿江大道运河隧道工程            ES0303                  工程   \n",
       "3       E0004           南京地铁某标段区间1            ES0303                  工程   \n",
       "4       E0005  杭州地铁1号线红普路站-九堡站区间隧道            ES0303                  工程   \n",
       "..        ...                  ...               ...                 ...   \n",
       "395     E0396                泡沫剂改良            ES0291               泡沫剂改良   \n",
       "396     E0397                膨润土改良            ES0292               膨润土改良   \n",
       "397     E0398                 加水改良            ES0293                加水改良   \n",
       "398     E0399                聚合物改良            ES0294               聚合物改良   \n",
       "399     E0400               地质0026            ES0298                  地质   \n",
       "\n",
       "    Entity_TypeID  \n",
       "0          En0015  \n",
       "1          En0015  \n",
       "2          En0015  \n",
       "3          En0015  \n",
       "4          En0015  \n",
       "..            ...  \n",
       "395        En0013  \n",
       "396        En0013  \n",
       "397        En0013  \n",
       "398        En0013  \n",
       "399        En0007  \n",
       "\n",
       "[400 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "entity_to_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb7a37e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "D = pd.DataFrame(columns=entity_type.Entity_TypeName[1:].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e93dffa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(entity_relation)):\n",
    "    head_entity=entity_relation.loc[i,'Head_EntityID']\n",
    "    tail_entity=entity_relation.loc[i,'Tail_EntityID']\n",
    "    head_entity_type=entity_to_type[entity_to_type['Entity_ID']==head_entity].iloc[0,4]\n",
    "    tail_entity_type=entity_to_type[entity_to_type['Entity_ID']==tail_entity].iloc[0,4]\n",
    "    tail_type_name=entity_type[entity_type['Entity_TypeID']==tail_entity_type].iloc[0,1]\n",
    "\n",
    "    if head_entity_type=='En0015':\n",
    "        if head_entity not in D['Project'].values:\n",
    "            D.loc[len(D)+1,'Project']=head_entity\n",
    "        if tail_entity_type!='En0015'and tail_entity_type!='En0001':\n",
    "            if D.loc[D['Project']==head_entity,tail_type_name].isnull().any():\n",
    "                D.loc[D['Project']==head_entity,tail_type_name]=D.loc[D['Project']==head_entity,tail_type_name].fillna(value=tail_entity)\n",
    "            else:\n",
    "                index=len(D)+1\n",
    "                D.loc[index]=D[D['Project']==head_entity].iloc[0,:]\n",
    "                D.loc[index,tail_type_name]=tail_entity\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6bd56d11",
   "metadata": {},
   "outputs": [],
   "source": [
    "D=D.fillna(value='NULL')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "46b6d034",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Phenomenon</th>\n",
       "      <th>Location</th>\n",
       "      <th>Tunnel</th>\n",
       "      <th>Shield</th>\n",
       "      <th>Segment</th>\n",
       "      <th>Geology</th>\n",
       "      <th>Propelling</th>\n",
       "      <th>Cutting</th>\n",
       "      <th>Seriflux</th>\n",
       "      <th>Grouting</th>\n",
       "      <th>Stabilization</th>\n",
       "      <th>Supporting</th>\n",
       "      <th>Target</th>\n",
       "      <th>Project</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>E0193</td>\n",
       "      <td>E0372</td>\n",
       "      <td>E0029</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0065</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0253</td>\n",
       "      <td>E0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>E0193</td>\n",
       "      <td>E0372</td>\n",
       "      <td>E0029</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0065</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0242</td>\n",
       "      <td>E0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>E0193</td>\n",
       "      <td>E0372</td>\n",
       "      <td>E0029</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0065</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0216</td>\n",
       "      <td>E0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E0152</td>\n",
       "      <td>E0373</td>\n",
       "      <td>E0030</td>\n",
       "      <td>E0044</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0066</td>\n",
       "      <td>E0090</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0266</td>\n",
       "      <td>E0002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>E0165</td>\n",
       "      <td>E0374</td>\n",
       "      <td>E0031</td>\n",
       "      <td>E0045</td>\n",
       "      <td>E0053</td>\n",
       "      <td>E0067</td>\n",
       "      <td>E0091</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0251</td>\n",
       "      <td>E0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>E0152</td>\n",
       "      <td>E0373</td>\n",
       "      <td>E0035</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0088</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0102</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0290</td>\n",
       "      <td>E0027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>E0188</td>\n",
       "      <td>E0381</td>\n",
       "      <td>E0035</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0064</td>\n",
       "      <td>E0089</td>\n",
       "      <td>E0092</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0318</td>\n",
       "      <td>E0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>E0188</td>\n",
       "      <td>E0381</td>\n",
       "      <td>E0035</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0064</td>\n",
       "      <td>E0089</td>\n",
       "      <td>E0092</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0323</td>\n",
       "      <td>E0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>E0188</td>\n",
       "      <td>E0381</td>\n",
       "      <td>E0035</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0064</td>\n",
       "      <td>E0089</td>\n",
       "      <td>E0092</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0225</td>\n",
       "      <td>E0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>E0188</td>\n",
       "      <td>E0381</td>\n",
       "      <td>E0035</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0064</td>\n",
       "      <td>E0089</td>\n",
       "      <td>E0092</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>NULL</td>\n",
       "      <td>E0245</td>\n",
       "      <td>E0028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Phenomenon Location Tunnel Shield Segment Geology Propelling Cutting  \\\n",
       "1        E0193    E0372  E0029   NULL    NULL   E0065       NULL    NULL   \n",
       "2        E0193    E0372  E0029   NULL    NULL   E0065       NULL    NULL   \n",
       "3        E0193    E0372  E0029   NULL    NULL   E0065       NULL    NULL   \n",
       "4        E0152    E0373  E0030  E0044    NULL   E0066      E0090    NULL   \n",
       "5        E0165    E0374  E0031  E0045   E0053   E0067      E0091    NULL   \n",
       "..         ...      ...    ...    ...     ...     ...        ...     ...   \n",
       "114      E0152    E0373  E0035   NULL    NULL   E0088       NULL    NULL   \n",
       "115      E0188    E0381  E0035   NULL   E0064   E0089      E0092    NULL   \n",
       "116      E0188    E0381  E0035   NULL   E0064   E0089      E0092    NULL   \n",
       "117      E0188    E0381  E0035   NULL   E0064   E0089      E0092    NULL   \n",
       "118      E0188    E0381  E0035   NULL   E0064   E0089      E0092    NULL   \n",
       "\n",
       "    Seriflux Grouting Stabilization Supporting Target Project  \n",
       "1       NULL     NULL          NULL       NULL  E0253   E0001  \n",
       "2       NULL     NULL          NULL       NULL  E0242   E0001  \n",
       "3       NULL     NULL          NULL       NULL  E0216   E0001  \n",
       "4       NULL     NULL          NULL       NULL  E0266   E0002  \n",
       "5       NULL     NULL          NULL       NULL  E0251   E0003  \n",
       "..       ...      ...           ...        ...    ...     ...  \n",
       "114     NULL    E0102          NULL       NULL  E0290   E0027  \n",
       "115     NULL     NULL          NULL       NULL  E0318   E0028  \n",
       "116     NULL     NULL          NULL       NULL  E0323   E0028  \n",
       "117     NULL     NULL          NULL       NULL  E0225   E0028  \n",
       "118     NULL     NULL          NULL       NULL  E0245   E0028  \n",
       "\n",
       "[118 rows x 14 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3954e884",
   "metadata": {},
   "outputs": [],
   "source": [
    "D.to_pickle(PATH+'D.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e1b7432",
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH='C:\\\\Users\\\\paper\\\\knowledge_center\\\\'\n",
    "import pandas as pd\n",
    "D=pd.read_pickle(PATH+'D.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "978345cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "values=[]\n",
    "for i in D.values:\n",
    "    values+=i.tolist()\n",
    "values_set=list(set(values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a5dca87a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['E0282',\n",
       " 'E0182',\n",
       " 'E0058',\n",
       " 'E0100',\n",
       " 'E0393',\n",
       " 'E0007',\n",
       " 'E0025',\n",
       " 'E0215',\n",
       " 'E0055',\n",
       " 'E0232',\n",
       " 'E0065',\n",
       " 'E0090',\n",
       " 'E0068',\n",
       " 'E0086',\n",
       " 'E0012',\n",
       " 'E0379',\n",
       " 'E0289',\n",
       " 'E0050',\n",
       " 'E0082',\n",
       " 'E0290',\n",
       " 'E0088',\n",
       " 'E0186',\n",
       " 'E0009',\n",
       " 'E0097',\n",
       " 'E0266',\n",
       " 'E0052',\n",
       " 'E0254',\n",
       " 'E0029',\n",
       " 'E0221',\n",
       " 'E0291',\n",
       " 'E0264',\n",
       " 'E0225',\n",
       " 'E0008',\n",
       " 'E0001',\n",
       " 'E0054',\n",
       " 'E0015',\n",
       " 'E0030',\n",
       " 'E0080',\n",
       " 'E0069',\n",
       " 'E0376',\n",
       " 'E0005',\n",
       " 'E0351',\n",
       " 'E0021',\n",
       " 'E0049',\n",
       " 'E0077',\n",
       " 'E0026',\n",
       " 'E0303',\n",
       " 'E0034',\n",
       " 'E0046',\n",
       " 'E0035',\n",
       " 'E0036',\n",
       " 'E0231',\n",
       " 'E0062',\n",
       " 'E0375',\n",
       " 'E0226',\n",
       " 'E0248',\n",
       " 'E0189',\n",
       " 'E0103',\n",
       " 'E0073',\n",
       " 'E0039',\n",
       " 'E0040',\n",
       " 'E0257',\n",
       " 'E0251',\n",
       " 'E0033',\n",
       " 'E0013',\n",
       " 'E0260',\n",
       " 'E0301',\n",
       " 'E0096',\n",
       " 'E0014',\n",
       " 'E0043',\n",
       " 'E0004',\n",
       " 'E0193',\n",
       " 'E0270',\n",
       " 'E0316',\n",
       " 'E0095',\n",
       " 'E0253',\n",
       " 'E0003',\n",
       " 'E0247',\n",
       " 'E0018',\n",
       " 'E0243',\n",
       " 'E0276',\n",
       " 'E0274',\n",
       " 'E0255',\n",
       " 'E0045',\n",
       " 'E0006',\n",
       " 'E0246',\n",
       " 'E0066',\n",
       " 'E0083',\n",
       " 'E0258',\n",
       " 'E0093',\n",
       " 'E0102',\n",
       " 'E0218',\n",
       " 'E0180',\n",
       " 'E0079',\n",
       " 'E0233',\n",
       " 'E0320',\n",
       " 'E0377',\n",
       " 'E0071',\n",
       " 'E0098',\n",
       " 'E0302',\n",
       " 'E0192',\n",
       " 'E0059',\n",
       " 'E0314',\n",
       " 'E0048',\n",
       " 'E0094',\n",
       " 'E0041',\n",
       " 'E0064',\n",
       " 'E0051',\n",
       " 'E0047',\n",
       " 'E0381',\n",
       " 'E0101',\n",
       " 'E0317',\n",
       " 'E0378',\n",
       " 'E0002',\n",
       " 'E0056',\n",
       " 'E0011',\n",
       " 'E0323',\n",
       " 'E0361',\n",
       " 'E0070',\n",
       " 'E0288',\n",
       " 'E0240',\n",
       " 'E0092',\n",
       " 'E0076',\n",
       " 'E0075',\n",
       " 'E0242',\n",
       " 'E0067',\n",
       " 'E0087',\n",
       " 'E0380',\n",
       " 'E0149',\n",
       " 'E0019',\n",
       " 'E0028',\n",
       " 'E0104',\n",
       " 'E0199',\n",
       " 'E0358',\n",
       " 'E0020',\n",
       " 'NULL',\n",
       " 'E0010',\n",
       " 'E0074',\n",
       " 'E0283',\n",
       " 'E0245',\n",
       " 'E0165',\n",
       " 'E0152',\n",
       " 'E0374',\n",
       " 'E0042',\n",
       " 'E0217',\n",
       " 'E0238',\n",
       " 'E0081',\n",
       " 'E0237',\n",
       " 'E0198',\n",
       " 'E0017',\n",
       " 'E0085',\n",
       " 'E0053',\n",
       " 'E0356',\n",
       " 'E0236',\n",
       " 'E0027',\n",
       " 'E0319',\n",
       " 'E0072',\n",
       " 'E0091',\n",
       " 'E0099',\n",
       " 'E0188',\n",
       " 'E0229',\n",
       " 'E0038',\n",
       " 'E0382',\n",
       " 'E0373',\n",
       " 'E0016',\n",
       " 'E0061',\n",
       " 'E0060',\n",
       " 'E0224',\n",
       " 'E0105',\n",
       " 'E0032',\n",
       " 'E0241',\n",
       " 'E0372',\n",
       " 'E0044',\n",
       " 'E0084',\n",
       " 'E0230',\n",
       " 'E0023',\n",
       " 'E0216',\n",
       " 'E0089',\n",
       " 'E0078',\n",
       " 'E0063',\n",
       " 'E0031',\n",
       " 'E0057',\n",
       " 'E0259',\n",
       " 'E0022',\n",
       " 'E0318',\n",
       " 'E0355',\n",
       " 'E0024',\n",
       " 'E0244',\n",
       " 'E0322',\n",
       " 'E0037',\n",
       " 'E0281']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7f73b2af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'E0282': 0,\n",
       " 'E0182': 1,\n",
       " 'E0058': 2,\n",
       " 'E0100': 3,\n",
       " 'E0393': 4,\n",
       " 'E0007': 5,\n",
       " 'E0025': 6,\n",
       " 'E0215': 7,\n",
       " 'E0055': 8,\n",
       " 'E0232': 9,\n",
       " 'E0065': 10,\n",
       " 'E0090': 11,\n",
       " 'E0068': 12,\n",
       " 'E0086': 13,\n",
       " 'E0012': 14,\n",
       " 'E0379': 15,\n",
       " 'E0289': 16,\n",
       " 'E0050': 17,\n",
       " 'E0082': 18,\n",
       " 'E0290': 19,\n",
       " 'E0088': 20,\n",
       " 'E0186': 21,\n",
       " 'E0009': 22,\n",
       " 'E0097': 23,\n",
       " 'E0266': 24,\n",
       " 'E0052': 25,\n",
       " 'E0254': 26,\n",
       " 'E0029': 27,\n",
       " 'E0221': 28,\n",
       " 'E0291': 29,\n",
       " 'E0264': 30,\n",
       " 'E0225': 31,\n",
       " 'E0008': 32,\n",
       " 'E0001': 33,\n",
       " 'E0054': 34,\n",
       " 'E0015': 35,\n",
       " 'E0030': 36,\n",
       " 'E0080': 37,\n",
       " 'E0069': 38,\n",
       " 'E0376': 39,\n",
       " 'E0005': 40,\n",
       " 'E0351': 41,\n",
       " 'E0021': 42,\n",
       " 'E0049': 43,\n",
       " 'E0077': 44,\n",
       " 'E0026': 45,\n",
       " 'E0303': 46,\n",
       " 'E0034': 47,\n",
       " 'E0046': 48,\n",
       " 'E0035': 49,\n",
       " 'E0036': 50,\n",
       " 'E0231': 51,\n",
       " 'E0062': 52,\n",
       " 'E0375': 53,\n",
       " 'E0226': 54,\n",
       " 'E0248': 55,\n",
       " 'E0189': 56,\n",
       " 'E0103': 57,\n",
       " 'E0073': 58,\n",
       " 'E0039': 59,\n",
       " 'E0040': 60,\n",
       " 'E0257': 61,\n",
       " 'E0251': 62,\n",
       " 'E0033': 63,\n",
       " 'E0013': 64,\n",
       " 'E0260': 65,\n",
       " 'E0301': 66,\n",
       " 'E0096': 67,\n",
       " 'E0014': 68,\n",
       " 'E0043': 69,\n",
       " 'E0004': 70,\n",
       " 'E0193': 71,\n",
       " 'E0270': 72,\n",
       " 'E0316': 73,\n",
       " 'E0095': 74,\n",
       " 'E0253': 75,\n",
       " 'E0003': 76,\n",
       " 'E0247': 77,\n",
       " 'E0018': 78,\n",
       " 'E0243': 79,\n",
       " 'E0276': 80,\n",
       " 'E0274': 81,\n",
       " 'E0255': 82,\n",
       " 'E0045': 83,\n",
       " 'E0006': 84,\n",
       " 'E0246': 85,\n",
       " 'E0066': 86,\n",
       " 'E0083': 87,\n",
       " 'E0258': 88,\n",
       " 'E0093': 89,\n",
       " 'E0102': 90,\n",
       " 'E0218': 91,\n",
       " 'E0180': 92,\n",
       " 'E0079': 93,\n",
       " 'E0233': 94,\n",
       " 'E0320': 95,\n",
       " 'E0377': 96,\n",
       " 'E0071': 97,\n",
       " 'E0098': 98,\n",
       " 'E0302': 99,\n",
       " 'E0192': 100,\n",
       " 'E0059': 101,\n",
       " 'E0314': 102,\n",
       " 'E0048': 103,\n",
       " 'E0094': 104,\n",
       " 'E0041': 105,\n",
       " 'E0064': 106,\n",
       " 'E0051': 107,\n",
       " 'E0047': 108,\n",
       " 'E0381': 109,\n",
       " 'E0101': 110,\n",
       " 'E0317': 111,\n",
       " 'E0378': 112,\n",
       " 'E0002': 113,\n",
       " 'E0056': 114,\n",
       " 'E0011': 115,\n",
       " 'E0323': 116,\n",
       " 'E0361': 117,\n",
       " 'E0070': 118,\n",
       " 'E0288': 119,\n",
       " 'E0240': 120,\n",
       " 'E0092': 121,\n",
       " 'E0076': 122,\n",
       " 'E0075': 123,\n",
       " 'E0242': 124,\n",
       " 'E0067': 125,\n",
       " 'E0087': 126,\n",
       " 'E0380': 127,\n",
       " 'E0149': 128,\n",
       " 'E0019': 129,\n",
       " 'E0028': 130,\n",
       " 'E0104': 131,\n",
       " 'E0199': 132,\n",
       " 'E0358': 133,\n",
       " 'E0020': 134,\n",
       " 'NULL': 135,\n",
       " 'E0010': 136,\n",
       " 'E0074': 137,\n",
       " 'E0283': 138,\n",
       " 'E0245': 139,\n",
       " 'E0165': 140,\n",
       " 'E0152': 141,\n",
       " 'E0374': 142,\n",
       " 'E0042': 143,\n",
       " 'E0217': 144,\n",
       " 'E0238': 145,\n",
       " 'E0081': 146,\n",
       " 'E0237': 147,\n",
       " 'E0198': 148,\n",
       " 'E0017': 149,\n",
       " 'E0085': 150,\n",
       " 'E0053': 151,\n",
       " 'E0356': 152,\n",
       " 'E0236': 153,\n",
       " 'E0027': 154,\n",
       " 'E0319': 155,\n",
       " 'E0072': 156,\n",
       " 'E0091': 157,\n",
       " 'E0099': 158,\n",
       " 'E0188': 159,\n",
       " 'E0229': 160,\n",
       " 'E0038': 161,\n",
       " 'E0382': 162,\n",
       " 'E0373': 163,\n",
       " 'E0016': 164,\n",
       " 'E0061': 165,\n",
       " 'E0060': 166,\n",
       " 'E0224': 167,\n",
       " 'E0105': 168,\n",
       " 'E0032': 169,\n",
       " 'E0241': 170,\n",
       " 'E0372': 171,\n",
       " 'E0044': 172,\n",
       " 'E0084': 173,\n",
       " 'E0230': 174,\n",
       " 'E0023': 175,\n",
       " 'E0216': 176,\n",
       " 'E0089': 177,\n",
       " 'E0078': 178,\n",
       " 'E0063': 179,\n",
       " 'E0031': 180,\n",
       " 'E0057': 181,\n",
       " 'E0259': 182,\n",
       " 'E0022': 183,\n",
       " 'E0318': 184,\n",
       " 'E0355': 185,\n",
       " 'E0024': 186,\n",
       " 'E0244': 187,\n",
       " 'E0322': 188,\n",
       " 'E0037': 189,\n",
       " 'E0281': 190}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "value_map = dict((v, i) for i,v in enumerate(values_set))\n",
    "value_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "45e751ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Phenomenon</th>\n",
       "      <th>Location</th>\n",
       "      <th>Tunnel</th>\n",
       "      <th>Shield</th>\n",
       "      <th>Segment</th>\n",
       "      <th>Geology</th>\n",
       "      <th>Propelling</th>\n",
       "      <th>Cutting</th>\n",
       "      <th>Seriflux</th>\n",
       "      <th>Grouting</th>\n",
       "      <th>Stabilization</th>\n",
       "      <th>Supporting</th>\n",
       "      <th>Target</th>\n",
       "      <th>Project</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>71</td>\n",
       "      <td>171</td>\n",
       "      <td>27</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>10</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>75</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>71</td>\n",
       "      <td>171</td>\n",
       "      <td>27</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>10</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>124</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>71</td>\n",
       "      <td>171</td>\n",
       "      <td>27</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>10</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>176</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>141</td>\n",
       "      <td>163</td>\n",
       "      <td>36</td>\n",
       "      <td>172</td>\n",
       "      <td>135</td>\n",
       "      <td>86</td>\n",
       "      <td>11</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>24</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>140</td>\n",
       "      <td>142</td>\n",
       "      <td>180</td>\n",
       "      <td>83</td>\n",
       "      <td>151</td>\n",
       "      <td>125</td>\n",
       "      <td>157</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>62</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>141</td>\n",
       "      <td>163</td>\n",
       "      <td>49</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>20</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>90</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>19</td>\n",
       "      <td>154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>159</td>\n",
       "      <td>109</td>\n",
       "      <td>49</td>\n",
       "      <td>135</td>\n",
       "      <td>106</td>\n",
       "      <td>177</td>\n",
       "      <td>121</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>184</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>159</td>\n",
       "      <td>109</td>\n",
       "      <td>49</td>\n",
       "      <td>135</td>\n",
       "      <td>106</td>\n",
       "      <td>177</td>\n",
       "      <td>121</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>116</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>159</td>\n",
       "      <td>109</td>\n",
       "      <td>49</td>\n",
       "      <td>135</td>\n",
       "      <td>106</td>\n",
       "      <td>177</td>\n",
       "      <td>121</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>31</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>159</td>\n",
       "      <td>109</td>\n",
       "      <td>49</td>\n",
       "      <td>135</td>\n",
       "      <td>106</td>\n",
       "      <td>177</td>\n",
       "      <td>121</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>139</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Phenomenon  Location  Tunnel  Shield  Segment  Geology  Propelling  \\\n",
       "1            71       171      27     135      135       10         135   \n",
       "2            71       171      27     135      135       10         135   \n",
       "3            71       171      27     135      135       10         135   \n",
       "4           141       163      36     172      135       86          11   \n",
       "5           140       142     180      83      151      125         157   \n",
       "..          ...       ...     ...     ...      ...      ...         ...   \n",
       "114         141       163      49     135      135       20         135   \n",
       "115         159       109      49     135      106      177         121   \n",
       "116         159       109      49     135      106      177         121   \n",
       "117         159       109      49     135      106      177         121   \n",
       "118         159       109      49     135      106      177         121   \n",
       "\n",
       "     Cutting  Seriflux  Grouting  Stabilization  Supporting  Target  Project  \n",
       "1        135       135       135            135         135      75       33  \n",
       "2        135       135       135            135         135     124       33  \n",
       "3        135       135       135            135         135     176       33  \n",
       "4        135       135       135            135         135      24      113  \n",
       "5        135       135       135            135         135      62       76  \n",
       "..       ...       ...       ...            ...         ...     ...      ...  \n",
       "114      135       135        90            135         135      19      154  \n",
       "115      135       135       135            135         135     184      130  \n",
       "116      135       135       135            135         135     116      130  \n",
       "117      135       135       135            135         135      31      130  \n",
       "118      135       135       135            135         135     139      130  \n",
       "\n",
       "[118 rows x 14 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D_int=D.replace(value_map)\n",
    "D_int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ca57a271",
   "metadata": {},
   "outputs": [],
   "source": [
    "D_int.to_pickle(PATH+'D_int.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2184794c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
